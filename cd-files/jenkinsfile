pipeline {

    agent any

    options {
        disableConcurrentBuilds()
        timestamps()
    }
    
    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Git branch to build')
    }

    
    stages {
    
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
    
        stage('Build SPA') {
            steps {
                dir('react-spa') {
                    script {
                        def commitHash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                        sh "docker build -t react-spa:${commitHash} ."
                    }
                }
            }
        }
        
        stage('Build API') {
            steps {
                dir('dotnet-api') {
                    script {
                        def commitHash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                        sh "docker build -t dotnet-api:${commitHash} ."
                    }
                }
            }
        }
        
        stage('Run SPA') {
            steps {
                script {
                    echo 'need access to image, then need to stop existing container and run new one. Need to specify name so know which to stop'
                }
            }
        }
        
    }
}