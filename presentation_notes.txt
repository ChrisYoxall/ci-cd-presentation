



Using the same bullet points from the notes from Claude (my email)




SLIDE ONE (TITLE PAGE) - CONTINUOUS INTEGRATION



SLIDE TWO (FOLLOW UP TITLE) - THE FIRST OF TWO PRESENTATIONS ON Continuous Integration / Continuous Deployment (CI/CD)

Notes:

* This presentation will focus on CI
* Have roughly 20 minutes on theory, roughly 20 minutes talking about implementation with GitHub Actions, 20 minutes to play.


SLIDE THREE - About me




SLIDE FOUR - About you

* I'm assuming you want to be or learn more about software development?
* Write code every day is my advice. 
* CI/CD may not be something you need to know much about

Notes:
* Have you had any experience or courses that focuses on CI/CD?
* 
* Don't stress that it's another thing to learn.
    - Most larger companies will have dedicated platform teams. However they still need someone to tell
        them about the software your team creates to know how to deploy it so need that common terminology
    - You can improve it if it doesn't work for your team or want to do more (i.e different tools, monitoring, alerts etc..)
    - Gives you a better understanding of architecture. At some point you will need to debug an incident in production
        that works fine on your computer. What will you do?



SLIDE FIVE - CI Definition

Developers frequently merge their code changes into a central repository, followed by automated checks.

* Frequently
* Build & Test
* Automated

Notes:
* Frequently usually means at least once a day. Can be as many as you want.
    - People are working on very similar code bases. What if a team of 3 each has a feature that takes 3-5 days?
        Code diverges and more chance of code conflicts
    - Daily merges mean merges are small. Much easier to approve a PR that is 100 lines than 500 lines.
    - If you have gone down the wrong path then it minimises wasted effort.
    - If something breaks, and a small change has just been merged, it's much easier to troubleshoot.
* Ensure your changes haven't broken anything by running checks
    - Building is one of the easiest checks
    - Common to have multiple tests and checks here - will cover soon. Unit testing is the most common.
* Automated:
    - Needs to be fast i.e. less than 15 min. If people are comitting frequently anything longer will start to back up the 
        pipeline. Want to notify the person who made the change before they get into their next task.
    - You may have to make changes to the pipeline or your tests to speed them up.
    - Fast feedback loops

** Mention version control and branching strategies. Doesn't matter what version control system you use
or the branching strategy (i.e. GitFlow, Feature Branches, Trunk Based) it's just merging frequently and running
automated tests.

SLIDE SIX - BENEFITS

* Improve quality
* Improves collaboration
* Reduce development time

FLESH THIS OUT MORE - should be mentioned in previous slide - this is a summary


SLIDE SEVEN - TYPES OF CHECKS

* Linting. 
* It builds
* Unit tests
* Unit test coverage
* Code quality
* Security analysis
* Integration tests
* End to End (UI tests)
* Performance tests

Notes:

Don't need all of these.

* Can fail linting rules even before builds
* Needs to be able to build
* Unit testing is very common.
* Unit test coverage. This wont usually stop the process, but is a good metric to watch.
* For example duplicated code. 
* Warns about possible security issues
* 



ADD A TOOLS SLIDE FOR COMMON CI/CD PLATFORMS


A Slide on COSTS - or part of tools


NEXT SLIDE - GITHUB ACTIONS

I've always found the terminology a bit confusing:
* GitHub Actions is the name of the platform.
* To achieve a task, create a 'GitHub Actions workflow' 
    * defined in YAML
    * are triggered by an event (i.e. PR created, scheduled run, webhook, manually)
    * run on a  VM (Ubuntu, Windows, or MacOS)

* Workflows are made up of Jobs
* Jobs are made up of Steps
* Steps run workflows, scripts, or run an Action
* An Action is a custom application on the GitHub Actions platform to perform a common task
    * Can write your own
    * Lots of Actions available on the marketplace

Runners?


Documentation is pretty good https://docs.github.com/en/actions:
* Go to page
* Click on the nice green 'Overview' button
* Note section in menu to the left on 'Continuous Integration'. Click on the link at the bottom for 'actions/starter-workflows
* Go to the section in the menu 'Write workflows' - most likely the 'syntax' and 'choose what workflows do' sections.


From https://dev.to/github/the-githubtoken-in-github-actions-how-it-works-change-permissions-customizations-3cgp:
* The way this works is that when you enable GitHub Actions in a repository, GitHub installs a GitHub App on that. The GITHUB_TOKEN secret is a GitHub App installation access token.






WANT TO ENABLE THESE TO ALL BE RUN LOCALLY BEFORE PR





name: Build API

on:
  workflow_call: 
  workflow_dispatch: 
    
env:
  PUBLISH_DIR: ${{ github.workspace }}/publish/dotnet-api

jobs:
  
  build:

    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ${{ github.workspace }}/dotnet-api

    steps:
      
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
          
      - name: Restore dependencies
        run: dotnet restore
        
      - name: Build
        run: dotnet build --no-restore --configuration Release    
      
      - name: Test
        run: dotnet test --no-build --verbosity normal --configuration Release
        
      - name: Publish
        working-directory: ${{ github.workspace }}/dotnet-api/BuildDeploy.Demo
        run: dotnet publish --configuration Release --no-build --output ${{ env.PUBLISH_DIR }}

      - name: Zip artifacts
        working-directory: ${{ env.PUBLISH_DIR }}
        run: zip -r ../dotnet-api-artifacts.zip .

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-api-artifacts
          path: ./dotnet-api/dotnet-api-artifacts.zip
          retention-days: 1



